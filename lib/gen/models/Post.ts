/* tslint:disable */
/* eslint-disable */
/**
 * forum
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { dateFormat } from '../../helper/genHelper';
import { exists } from './runtime';
import {
    UserData,
    UserDataFromJSON,
    UserDataFromJSONTyped,
    UserDataToJSON,
} from './UserData';

import {
    Tags,
    TagsFromJSON,
    TagsFromJSONTyped,
    TagsToJSON,
} from './Tags'

/**
 * ユーザ投稿モデル
 * @export
 * @interface Post
 */
export interface Post {
    /**
     * シーケンシャルID
     * @type {string}
     * @memberof Post
     */
    uuid?: string;
    /**
     * 
     * @type {Date}
     * @memberof Post
     */
    writeDay?: string;
    /**
     * 投稿先のゲームのID
     * @type {string}
     * @memberof Post
     */
    gameId: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    server?: string;
    /**
     * プレイヤーの名前
     * @type {string}
     * @memberof Post
     */
    playerName: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    purpose: PostPurposeEnum;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    vcUse: PostVcUseEnum;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    device: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    comment: string;
    /**
     * 
     * @type {Date}
     * @memberof Post
     */
    createdAt?: string;
    /**
     * 
     * @type {UserData}
     * @memberof Post
     */
    userData?: UserData;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    deleteKey?: string;
    /**
     * 相手に求めることを記載するタグ
     * @type {Array<Tags>}
     * @memberof Post
     */
    tags?: Array<Tags>;
    /**
     * 自分に当てはまることを記載するタグ
     * @type {Array<Tags>}
     * @memberof Post
     */
    selfTags?: Array<Tags>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Post
     */
    playTime?: Array<PostPlayTimeEnum>;

    imageData?: string;
}

/**
* @export
* @enum {string}
*/
export enum PostPurposeEnum {
    Play = 'PLAY',
    Friend = 'FRIEND',
    Guruguru = 'GURUGURU',
    EndContent = 'END_CONTENT',
    Helpme = 'HELPME',
    TeamLanch = 'TEAM_LANCH',
    TeamScout = 'TEAM_SCOUT',
    TeamJoin = 'TEAM_JOIN',
    Event = 'EVENT',
    Trade = 'TRADE',
    Other = 'OTHER'
}/**
* @export
* @enum {string}
*/
export enum PostVcUseEnum {
    Either = 'EITHER',
    Use = 'USE',
    Unuse = 'UNUSE',
}/**
* @export
* @enum {string}
*/
export enum PostPlayTimeEnum {
    WeekdaysM = 'WEEKDAYS_M',
    WeekdaysL = 'WEEKDAYS_L',
    WeekdaysN = 'WEEKDAYS_N',
    WeekdaysMn = 'WEEKDAYS_MN',
    WeekdaysEm = 'WEEKDAYS_EM',
    HolidaysEm = 'HOLIDAYS_EM',
    HolidaysM = 'HOLIDAYS_M',
    HolidaysL = 'HOLIDAYS_L',
    HolidaysN = 'HOLIDAYS_N',
    HolidaysMn = 'HOLIDAYS_MN',
    BestEffort = 'BEST_EFFORT',
    Random = 'RANDOM',
    Weekdays = 'WEEKDAYS',
    Holidays = 'HOLIDAYS'
}

export function PostFromJSON(json: any): Post {
    return PostFromJSONTyped(json, false);
}

export function PostFromJSONTyped(json: any, ignoreDiscriminator: boolean): Post {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
        'writeDay': !exists(json, 'writeDay') ? undefined : (new Date(json['writeDay']).toISOString()),
        'gameId': json['gameId'],
        'title': json['title'],
        'server': !exists(json, 'server') ? undefined : json['server'],
        'playerName': json['playerName'],
        'purpose': json['purpose'],
        'vcUse': json['vcUse'],
        'device': json['device'],
        'comment': json['comment'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (dateFormat(new Date(json['createdAt']))),
        'userData': !exists(json, 'userData') ? undefined : UserDataFromJSON(json['userData']),
        'deleteKey': !exists(json, 'deleteKey') ? undefined : json['deleteKey'],
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(TagsFromJSON)),
        'selfTags': !exists(json, 'selfTags') ? undefined : ((json['selfTags'] as Array<any>).map(TagsFromJSON)),
        'playTime': !exists(json, 'playTime') ? undefined : json['playTime'],
        'imageData': !exists(json, 'imageData') ? undefined : json['imageData'],
    };
}

export function PostToJSON(value?: Post | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'writeDay': value.writeDay === undefined ? undefined : (value.writeDay.substr(0,10)),
        'gameId': value.gameId,
        'title': value.title,
        'server': value.server,
        'playerName': value.playerName,
        'purpose': value.purpose,
        'vcUse': value.vcUse,
        'device': value.device,
        'comment': value.comment,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt),
        'userData': UserDataToJSON(value.userData),
        'deleteKey': value.deleteKey,
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(TagsToJSON)),
        'selfTags': value.selfTags === undefined ? undefined : ((value.selfTags as Array<any>).map(TagsToJSON)),
        'playTime': value.playTime,
    };
}


